x$SetInverse(Inverse)
Inverse
}
# Testing -----------------------------------------------------------------
MyMatrix <-matrix(1:4,2,2)
Test_1<- makeCacheMatrix(MyMatrix)
cacheSolve(Test_1)
Inverse <- x$GetInverse()
Test_1<- makeCacheMatrix(MyMatrix)
Test_1$GetInverse()
Test_1$set()
Test_1$set(Inverse)
Test_1$GetInverse()
# Creating the makeCacheMatrix function -----------------------------------------------------------
#creating a blank Inverse matrix for the inputted matrix
#Filling the matrix with the inverse
makeCacheMatrix <- function(x = matrix()) {
Inverse <- NULL
set <- function(y) {
x <<- y
Inverse <<- NULL
}
get <- function() x
SetInverse <- function(solve) Inverse <<- solve
GetInverse <- function() Inverse
list(set = set,
get = get,
SetInverse = SetInverse,
GetInverse = GetInverse)
}
# Creating cacheSolve function --------------------------------------------
cacheSolve <- function(x, ...) {
Inverse <- x$GetInverse()
if(!is.null(Inverse)) {
message("getting cached data")
return(Inverse)
}
data <- x$get()
Inverse <- solve(x)
x$SetInverse(Inverse)
Inverse
}
# Testing -----------------------------------------------------------------
MyMatrix <-matrix(1:4,2,2)
Test_1<- makeCacheMatrix(MyMatrix)
cacheSolve(Test_1)
m <- mean(data, ...)
# Creating the makeCacheMatrix function -----------------------------------------------------------
#creating a blank Inverse matrix for the inputted matrix
#Filling the matrix with the inverse
makeCacheMatrix <- function(x = matrix()) {
Inverse <- NULL
set <- function(y) {
x <<- y
Inverse <<- NULL
}
get <- function() x
SetInverse <- function(solve) Inverse <<- solve
GetInverse <- function() Inverse
list(set = set,
get = get,
SetInverse = SetInverse,
GetInverse = GetInverse)
}
# Creating cacheSolve function --------------------------------------------
cacheSolve <- function(x, ...) {
Inverse <- x$GetInverse()
if(!is.null(Inverse)) {
message("getting cached data")
return(Inverse)
}
data <- x$get()
Inverse <- solve(data, ...)
x$SetInverse(Inverse)
Inverse
}
MyMatrix <-matrix(1:4,2,2)
Test_1<- makeCacheMatrix(MyMatrix)
cacheSolve(Test_1)
cacheSolve(Test_1)
MyMatrix <-matrix(1:16,4,4)
Test_1<- makeCacheMatrix(MyMatrix)
cacheSolve(Test_1)
MyMatrix <-matrix(1:4,2,2)
Test_1<- makeCacheMatrix(MyMatrix)
cacheSolve(Test_1)
cacheSolve(Test_1)
# Creating the makeCacheMatrix function -----------------------------------------------------------
makeCacheMatrix <- function(x = matrix()) {
Inverse <- NULL
set <- function(y) {
x <<- y
Inverse <<- NULL
}
get <- function() x
SetInverse <- function(solve) Inverse <<- solve
GetInverse <- function() Inverse
list(set = set,
get = get,
SetInverse = SetInverse,
GetInverse = GetInverse)
}
# Creating cacheSolve function --------------------------------------------
cacheSolve <- function(x, ...) {
Inverse <- x$GetInverse()
if(!is.null(Inverse)) {
message("Getting cached inverse data")
return(Inverse)
}
data <- x$get()
Inverse <- solve(data, ...)
x$SetInverse(Inverse)
Inverse
}
# Testing -----------------------------------------------------------------
MyMatrix <-matrix(1:4,2,2)
Test_1<- makeCacheMatrix(MyMatrix)
cacheSolve(Test_1)
cacheSolve(Test_1)
#Returns a vector of set, get, setinverse and getinverse for cacheing matrix inverse.
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <-function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
#Checks if inverse has already been calculted. If so, returns the previous calculation. If not, calcualtes inverse.
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
MyMatrix <-matrix(1:4,2,2)
Test_1<- makeCacheMatrix(MyMatrix)
cacheSolve(Test_1)
cacheSolve(Test_1)
set.seed(1)
rpois(5, 2)
rnorm?
?rnorm
rnorm(5,0,1)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
?stack
stack(matrix(1:4,2,2))
stack(matrix(1:4,2,2))
matrix(1:4,2,2)
stack(test2
)
best("SC", "heart attack")
#Test Data
TimeFreqDom<- read.table('test/X_test.txt')
Activity<- read.table('test/Y_test.txt')
Subject<- read.table('test/subject_test.txt')
#Renaming test columns before merge
colnames(Subject)<- 'Subject'
colnames(Activity)<- 'Activity'
TestData<- cbind(Activity,Subject,TimeFreqDom)
rm(TimeFreqDom,Activity,Subject)
#Reading Train
TimeFreqDom<- read.table('train/X_train.txt')
Activity<- read.table('train/Y_train.txt')
Subject<- read.table('train/subject_train.txt')
#Renaming train columns before merge
colnames(Subject)<- 'Subject'
colnames(Activity)<- 'Activity'
TrainData<- cbind(Activity,Subject,TimeFreqDom)
rm(TimeFreqDom,Activity,Subject)
TestTrain<- rbind(TestData, TrainData)
rm(TestData, TrainData)
# Cleaning Data -----------------------------------------------------------
# Creating a lookup for Activity
Activity<- read.table('activity_labels.txt')
LookupActivity <- Activity$V2
names(LookupActivity)<- Activity$V1
# Keeping only the mean and standard deviation
Features<- read.table('features.txt', fill = T)
colnames(TestTrain)[3:563]<- Features$V2
Features<- subset(Features, grepl('mean',Features$V2)|grepl('std', Features$V2) )
Features$V1<- Features$V1+2
TestTrain<- TestTrain[,c(1,2,Features$V1)]
TestTrain$Activity<- LookupActivity[TestTrain$Activity]
rm(LookupActivity,Features,Activity)
# Clean Data Set  ---------------------------------------------------------
#Finding all the combinations of the person and activity
PersonActivityCombo <- unique.data.frame(TestTrain[,c(1,2)])
PersonActivityCombo$CombinedKey<- paste(PersonActivityCombo$Activity, '&',PersonActivityCombo$Subject, sep = '')
#Creating an empty DF to put the means of each activity into
PersonActivityCombo3<- data.frame(row.names = colnames(TestTrain[-c(1:2)]))
#Function that subsets the main df for each subject and activity combo then creates a new DF of means
#This DF is then merged with the master DF to contain the means for all of the person/activity combos
for(combo in PersonActivityCombo$CombinedKey){
person<- unlist(strsplit(combo,split = '&'))[2]
activity <- unlist(strsplit(combo,split = '&'))[1]
x<- subset(TestTrain, TestTrain$Activity==activity & TestTrain$Subject==person)
z<- as.data.frame(apply(x[-c(1:2)], MARGIN = 2, mean))
colnames(z)<- combo
PersonActivityCombo3<<- cbind(PersonActivityCombo3,z)
}
TidyNames<- as.data.frame(rownames(PersonActivityCombo3))
TidyNames$`rownames(PersonActivityCombo3)`<- sapply(TidyNames$`rownames(PersonActivityCombo3)`, function(x){
FirstLetter<- substr(x,1,1)
FirstLetter<- gsub('t', 'Time', FirstLetter)
FirstLetter<- gsub('f','FrequencyDomainSignals', FirstLetter)
Final<- paste(FirstLetter,substr(x,2,nchar(x)), sep = '')
return(Final)
})
rownames(PersonActivityCombo3)<- TidyNames$`rownames(PersonActivityCombo3)`
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
?runif
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 0.2)))
hist(mns)
mean(ms)
mean(mns)
1/0.2
histogram <- hist(mns)
histogram + abline(x=mean(mns))
histogram + abline(mean(mns))
histogram + abline(v=mean(mns))
histogram
abline(v=mean(mns))
abline(v=mean(mns), col = 'green')
abline(v=mean(mns), col = 'green', width = 2)
abline(v=mean(mns), col = 'green', lwd = 2)
abline(v=mean(mns), col = 'green', lwd = 2)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 0.2)))
histogram <- hist(mns)
histogram
abline(v=mean(mns), col = 'green', lwd = 2)
rexp(n, 0.2)
abline(v = 1/0.2, col = 'red', lwd = 2)
points(rnorm(100, 1/0.2, 1/0.2))
hist(rnorm(100, 1/0.2, 1/0.2))
hist(rnorm(100, 1/0.2, 1/0.2))
hist(rnorm(100, 1/0.2, 1/0.2))
mns2 = NULL
for (i in 1 : 1000) mns2 = c(mns2, mean(rnorm(40, 1/0.2,1/0.2)))
points(mns2)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 0.2)))
histogram <- hist(mns)
histogram
abline(v=mean(mns), col = 'green', lwd = 2)
abline(v = 1/0.2, col = 'red', lwd = 2)
abline(v=mean(mns), col = 'green', lwd = 2)
mns2 = NULL
for (i in 1 : 1000) mns2 = c(mns2, mean(rnorm(40, 1/0.2,1/0.2)))
points(mns2)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 0.2)))
histogram <- hist(mns)
abline(v=mean(mns), col = 'green', lwd = 2)
abline(v = 1/0.2, col = 'red', lwd = 2)
abline(v=mean(mns), col = 'blue', lwd = 2)
abline(v = 1/0.2, col = 'red', lwd = 2)
histogram <- hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40, 0.2)))
histogram <- hist(mns)
abline(v=mean(mns), col = 'green', lwd = 2)
histogram <- hist(mns+labs(y= "Frequency", x = "Mean") )
histogram <- hist(mns aes(labs(y= "Frequency", x = "Mean") ))
histogram <- hist(mns, aes(labs(y= "Frequency", x = "Mean") ))
histogram <- hist(mns, aes=labs(y= "Frequency", x = "Mean") )
histogram <- hist(mns, labs(y= "Frequency", x = "Mean") )
hist(mns,xlab = 'Means', ylab = 'Frequency',title = 'Exploring the Central Limit Theorum')
hist(mns,xlab = 'Means', ylab = 'Frequency',main = 'Exploring the Central Limit Theorum')
abline(v=mean(mns), col = 'green', lwd = 2)
abline(v = 1/0.2, col = 'red', lwd = 2)
for (i in 1 : 1000) mns2 = c(mns2, mean(rnorm(40, 1/0.2,1/0.2)))
hist(mns2,xlab = 'Means', ylab = 'Frequency',main = 'Using the Normal Distribution')
abline(v=mean(mns), col = 'green', lwd = 2)
hist(mns2,xlab = 'Means', ylab = 'Frequency',main = 'Using the Normal Distribution')
abline(v = mean(mns2), col = 'red', lwd = 2)
abline(v=mean(mns), col = 'green', lwd = 2)
hist(rnorm(40, 1/0.2,1/0.2)),xlab = 'Means', ylab = 'Frequency',main = 'Using the Normal Distribution')
hist(rnorm(40, 1/0.2,1/0.2),xlab = 'Means', ylab = 'Frequency',main = 'Using the Normal Distribution')
hist(rnorm(1000, 1/0.2,1/0.2),xlab = 'Means', ylab = 'Frequency',main = 'Using the Normal Distribution')
abline(v = mean(mns2), col = 'red', lwd = 2)
abline(v=mean(mns), col = 'green', lwd = 2)
hist(rnorm(1000, 1/0.2,1/0.2),breaks = 2.5,xlab = 'Means', ylab = 'Frequency',main = 'Using the Normal Distribution')
hist(rnorm(1000, 1/0.2,1/0.2),breaks = 0.5,xlab = 'Means', ylab = 'Frequency',main = 'Using the Normal Distribution')
hist(rnorm(1000, 1/0.2,1/0.2),breaks = 10,xlab = 'Means', ylab = 'Frequency',main = 'Using the Normal Distribution')
hist(rnorm(1000, 1/0.2,1/0.2),breaks = 20,xlab = 'Means', ylab = 'Frequency',main = 'Using the Normal Distribution')
library(datasets)
knitr::opts_chunk$set(echo = TRUE)
summary(ToothGrowth)
str(ToothGrowth)
summary(ToothGrowth)
str(ToothGrowth)
tinytex::install_tinytex()
```{r setup, include=FALSE}
```{r setup, include=FALSE}
str(ToothGrowth)
```{r setup, include=FALSE}
library(ggplot2)
ggplot(ToothGrowth)+ geom_point(aes(x=dose, y = len, factor=supp))
ggplot(ToothGrowth)+ geom_bar(aes(x=dose, y = len, colour=supp))
ggplot(ToothGrowth)+ geom_bar(aes(x=dose, y = len, colour=supp))
ggplot(ToothGrowth)+ geom_bar(aes(x=dose, y = len), colour=supp))
ggplot(ToothGrowth)+ geom_bar(aes(x=dose, y = len), colour=supp)
str(ToothGrowth)
ggplot(ToothGrowth)+ geom_bar(aes(x=dose, y = len), colour=ToothGrowth$supp)
ggplot(ToothGrowth)+ geom_bar(aes(x=dose, y = len), fill=ToothGrowth$supp)
plot(len~dose+supp, ToothGrowth)
ggplot(ToothGrowth, aes(x=dose, y = len), color =supp)+geom_point()
ggplot(ToothGrowth, aes(x=dose, y = len), color =as.factor(supp))+geom_point()
ggplot(ToothGrowth, aes(x=dose, y = len) )+geom_point(aes(color =as.factor(supp)))
ggplot(ToothGrowth, aes(x=dose, y = len) )+geom_boxplot(aes(color =as.factor(supp)))
ggplot(ToothGrowth, aes(x=dose, y = len) )+geom_line(aes(color =as.factor(supp)))
ggplot(ToothGrowth, aes(x=dose, y = avg(len)) )+geom_line(aes(color =as.factor(supp)))
ggplot(ToothGrowth, aes(x=dose, y = mean(len)) )+geom_line(aes(color =as.factor(supp)))
ggplot(ToothGrowth, aes(x=dose, y = mean(len)) )+geom_point(aes(color =as.factor(supp)))
ggplot(ToothGrowth, aes(x=dose, y = len )+geom_point(aes(color =as.factor(supp)))
ggplot(ToothGrowth, aes(x=dose, y = len ))+geom_point(aes(color =as.factor(supp)))
ggplot(ToothGrowth, aes(x=dose, y = len ))+geom_point(aes(color =as.factor(supp)))
str(ToothGrowth)
summary(ToothGrowth)
mean(ToothGrowth$len~ToothGrowth$dose+ToothGrowth$supp)
table(mean(ToothGrowth$len, ToothGrowth$supp, ToothGrowth$dose))
table(mean(ToothGrowth$len), ToothGrowth$supp, ToothGrowth$dose)
mean(subset(ToothGrowth, dose==0.5 & supp = 'OJ'))
mean(subset(ToothGrowth, dose==0.5 & supp == 'OJ'))
mean(subset(ToothGrowth, dose==0.5 & supp == 'OJ', select = len), na.rm = T)
mean(subset(ToothGrowth, dose==0.5 & supp == 'OJ')$len, na.rm = T)
mean(subset(ToothGrowth, dose==0.5 & supp == 'OJ')$len, na.rm = T)
mean(subset(ToothGrowth, dose==1 & supp == 'OJ')$len, na.rm = T)
mean(subset(ToothGrowth, dose==1.5 & supp == 'OJ')$len, na.rm = T)
mean(subset(ToothGrowth, dose==2 & supp == 'OJ')$len, na.rm = T)
Means<- unique(subset(ToothGrowth, select = c(ToothGrowth$supp, ToothGrowth$dose)))
MeanCalc <- function(InputSupp, InputDose){
mean(subset(ToothGrowth, supp== InputSuppm & dose = InputDose)$len, na.rm=T)
MeanCalc <- function(InputSupp, InputDose){
mean(subset(ToothGrowth, supp== InputSuppm & dose == InputDose)$len, na.rm=T)
}
View(Means)
Means<- subset(ToothGrowth, select = c(ToothGrowth$supp, ToothGrowth$dose))
View(Means)
Means<- subset(ToothGrowth, select = c(supp, dose))
View(Means)
Means<- unique(subset(ToothGrowth, select = c(supp, dose)))
View(Means)
MeanCalc <- function(InputSupp, InputDose){
mean(subset(ToothGrowth, supp== InputSuppm & dose == InputDose)$len, na.rm=T)
}
Means$Mean<- mapply(MeanCalc(x,y), ToothGrowth$supp, ToothGrowth$dose)
mean(subset(ToothGrowth, supp== InputSupp & dose == InputDose)$len, na.rm=T)
MeanCalc <- function(InputSupp, InputDose){
mean(subset(ToothGrowth, supp== InputSupp & dose == InputDose)$len, na.rm=T)
}
Means$Mean<- mapply(MeanCalc(x,y), ToothGrowth$supp, ToothGrowth$dose)
Means$Mean<- mapply(MeanCalc(InputSupp, InputDose), ToothGrowth$supp, ToothGrowth$dose)
Means$Mean<- MeanCalc(Means$supp, Means$dose)
View(Means)
Means$Mean<- mapply(MeanCalc, Means$supp, Means$dose)
View(Means)
Means
t.test(subset(ToothGrowth , supp == 'OJ')$len, subset(ToothGrowth, supp == 'VC')$len)
t.test(subset(ToothGrowth , dose=0.5)$len, subset(ToothGrowth, dose = 2.0)$len)
t.test(subset(ToothGrowth , dose==0.5)$len, subset(ToothGrowth, dose == 2.0)$len)
t.test(subset(ToothGrowth , dose==0.5)$len, subset(ToothGrowth, dose == 2.0)$len)
knitr::opts_chunk$set(echo = TRUE)
MyDist <- rexp(n, 0.2)
??runif
?runif
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,0.2)))
hist(mns)
line(x= mean(mns))
abline(v = mean(mns))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,0.2)))
hist(mns)
abline(v = mean(mns))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,0.2)))
hist(mns)
abline(v = mean(mns), colour = 'Red')
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,0.2)))
hist(mns)
abline(v = mean(mns), col = 'Red')
SampleMean<- mean(mns)
std(mns)
sd(mns)
(1/0.2)/sqrt(40)
hist(mns)
curve(dnorm(x, mean=1/0.2, sd=(1/0.2)/sqrt(40)),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
hist(mns,freq = F)
curve(dnorm(x, mean=1/0.2, sd=(1/0.2)/sqrt(40)),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
hist(mns,freq = F)
curve(dnorm(x, mean=1/0.2, sd=(1/0.2)/sqrt(40)),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
Data <- read.csv('activity.csv')
setwd("~/Documents/GitHub/GettingCleaningData/Reproducible-Research-Assignment-1")
Data <- read.csv('activity.csv')
str(Data)
Data$date<- as.Date(Data$date)
TotalStepsPerDay <- as.data.frame(unique(Data$date))
names(TotalStepsPerDay)<- 'Date'
TotalStepsPerDay$Steps<- sapply(TotalStepsPerDay$Date, function(x){
day<- subset(Data,date==x )
sum(day$steps)
})
library(ggplot2)
library(tidyverse)
ggplot(TotalStepsPerDay, aes(x=Steps)) + geom_histogram()
Mean_Median_Data <- as.data.frame(unique(Data$date))
names(Mean_Median_Data)<- 'Date'
Mean_Median_Data$MeanSteps<- sapply(Mean_Median_Data$Date, function(x){
mean(subset(Data,date==x)$steps, na.rm=T)
})
Mean_Median_Data$MedianSteps<- sapply(Mean_Median_Data$Date, function(x){
median(subset(Data,date==x)$steps, na.rm=T)
})
Mean_Median_Data$MedianStepsNo0<- sapply(Mean_Median_Data$Date, function(x){
median(subset(Data,date==x& steps!=0)$steps, na.rm=T)
})
Mean_Median_Data
MeanPerInterval <- as.data.frame(unique(Data$interval))
names(MeanPerInterval)<- 'Interval'
MeanPerInterval$MeanSteps<- sapply(MeanPerInterval$Interval, function(x){
mean(subset(Data,interval==x)$steps, na.rm=T)
})
ggplot(na.omit(MeanPerInterval))+ geom_line(aes(y = MeanSteps, x = Interval))
subset(MeanPerInterval, MeanSteps== max(MeanPerInterval$MeanSteps))
InputMeanPerInterval <- MeanPerInterval$MeanSteps
names(InputMeanPerInterval)<- MeanPerInterval$Interval
DataInfilledNa<- Data
DataInfilledNa$steps<- apply(Data,1,function(x){
if(is.na(x[1])){
mean<- round(InputMeanPerInterval[x[3]],digits = 0)
} else (mean<- x[1])
return(mean)
})
DataInfilledNa$steps<- as.numeric(DataInfilledNa$steps)
DataInfilledNa$steps<-replace_na(DataInfilledNa$steps,replace = as.numeric(mean(Data$steps,na.rm=T)))
TotalStepsPerDayNoNA <- as.data.frame(unique(DataInfilledNa$date))
names(TotalStepsPerDayNoNA)<- 'Date'
TotalStepsPerDayNoNA$Steps<- sapply(TotalStepsPerDayNoNA$Date, function(x){
day<- subset(DataInfilledNa,date==x )
sum(day$steps)
})
ggplot(TotalStepsPerDayNoNA, aes(x=Steps)) + geom_histogram()
Mean_Median_Data_No_NA <- as.data.frame(unique(DataInfilledNa$date))
names(Mean_Median_Data_No_NA)<- 'Date'
Mean_Median_Data_No_NA$MeanSteps<- sapply(Mean_Median_Data_No_NA$Date, function(x){
mean(subset(DataInfilledNa,date==x)$steps, na.rm=T)
})
Mean_Median_Data_No_NA$MedianSteps<- sapply(Mean_Median_Data_No_NA$Date, function(x){
median(subset(DataInfilledNa,date==x)$steps, na.rm=T)
})
Mean_Median_Data_No_NA$MedianStepsNo0<- sapply(Mean_Median_Data_No_NA$Date, function(x){
median(subset(DataInfilledNa,date==x& steps!=0)$steps, na.rm=T)
})
Mean_Median_Data_No_NA
Combined <- left_join(Mean_Median_Data, Mean_Median_Data_No_NA, by = 'Date')
Combined$MeanDiff<- Combined$MeanSteps.x - Combined$MeanSteps.y
max(Combined$MeanDiff,na.rm = T)
min(Combined$MeanDiff,na.rm = T)
Combined$MedianDiff<- Combined$MedianSteps.x - Combined$MedianSteps.y
max(Combined$MedianDiff,na.rm = T)
min(Combined$MedianDiff,na.rm = T)
Combined$MedianDiffNo0<- Combined$MedianStepsNo0.x - Combined$MedianStepsNo0.y
max(Combined$MedianDiffNo0,na.rm = T)
min(Combined$MedianDiffNo0,na.rm = T)
sum(is.na(Data))
DataInfilledNa$Weekend <- weekdays(DataInfilledNa$date)
View(DataInfilledNa)
DataInfilledNa$Weekend<- sapply(DataInfilledNa$date, function(x){
if(weekdays(x)%in% c('Saturday', 'Sunday')) { Weekend<- "Yes"}
else(Weekend<- "No")
})
View(DataInfilledNa)
DataInfilledNa$Weekend<- as.factor(sapply(DataInfilledNa$date, function(x){
if(weekdays(x)%in% c('Saturday', 'Sunday')) { Weekend<- "Yes"}
else(Weekend<- "No")
}))
ggplot(data=DataInfilledNa, aes(x= interval)) + ggplot2::geom_line(aes(pannel = 'Weekend'))
ggplot(data=DataInfilledNa, aes(x= interval)) + geom_histogram()
ggplot(data=DataInfilledNa, aes(x= steps, y = interval)) + geom_histogram()
ggplot(data=DataInfilledNa, aes(x= steps, y = interval)) + geom_line()
ggplot(data=DataInfilledNa, aes(x= interval, y = steps)) + geom_line()
View(Data)
ggplot(data=DataInfilledNa, aes(x= interval, y = mean(steps))) + geom_line()
ggplot(data=DataInfilledNa) + geom_line(, aes(x= interval, y = mean(steps)))
ggplot(data=DataInfilledNa) + geom_line( aes(x= interval, y = mean(steps)))
ggplot(data=DataInfilledNa, aes(x= interval, y = mean(steps))) +stat_summary(fun = "mean", geom = "line")
ggplot(data=DataInfilledNa, aes(x= DataInfilledNa$interval, y = steps)) +stat_summary(fun = "mean", geom = "line")
ggplot(data=DataInfilledNa, aes(x= interval, y = steps)) +stat_summary(fun = "mean", geom = "line")
ggplot(data=DataInfilledNa, aes(x= interval, y = steps)) +stat_summary(fun = "mean", geom = "line") + facet_grid(steps~Weekend)
